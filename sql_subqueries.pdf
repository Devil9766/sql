# Subqueries in SQL

## What is a Subquery?
A subquery is a query nested inside another SQL query. It can be used in various clauses such as SELECT, FROM, WHERE, and HAVING. Subqueries can return a single value, a list of values, or a table.

## Types of Subqueries

1. **Single-Row Subquery**: Returns a single row and can be used with comparison operators.
   ```sql
   SELECT employee_name
   FROM employees
   WHERE salary > (SELECT AVG(salary) FROM employees);
   ```

2. **Multiple-Row Subquery**: Returns multiple rows and can be used with IN, ANY, or ALL.
   ```sql
   SELECT employee_name
   FROM employees
   WHERE department_id IN (SELECT department_id FROM departments WHERE location_id = 1000);
   ```

3. **Correlated Subquery**: A subquery that references columns from the outer query. It is executed once for each row processed by the outer query.
   ```sql
   SELECT employee_name
   FROM employees e1
   WHERE salary > (SELECT AVG(salary) FROM employees e2 WHERE e1.department_id = e2.department_id);
   ```

4. **Subquery in the FROM Clause**: Used to create a temporary table that can be referenced in the main query.
   ```sql
   SELECT department_id, AVG(salary) AS avg_salary
   FROM (SELECT department_id, salary FROM employees) AS dept_salaries
   GROUP BY department_id;
   ```

5. **Subquery in the SELECT Clause**: Used to return a value in the result set.
   ```sql
   SELECT employee_name,
          (SELECT department_name FROM departments WHERE department_id = employees.department_id) AS department_name
   FROM employees;
   ```

## Examples with Explanations

1. **Finding Employees with Above-Average Salaries**:
   ```sql
   SELECT employee_name
   FROM employees
   WHERE salary > (SELECT AVG(salary) FROM employees);
   ```

2. **Listing Departments with Employees in a Specific Location**:
   ```sql
   SELECT department_name
   FROM departments
   WHERE department_id IN (SELECT department_id FROM employees WHERE location_id = 1000);
   ```

3. **Finding Departments with Higher Average Salaries**:
   ```sql
   SELECT department_id
   FROM departments d
   WHERE (SELECT AVG(salary) FROM employees e WHERE e.department_id = d.department_id) > 50000;
   ```

4. **Using a Subquery in the FROM Clause**:
   ```sql
   SELECT department_id, COUNT(*) AS employee_count
   FROM (SELECT department_id FROM employees) AS dept_employees
   GROUP BY department_id;
   ```

5. **Getting Employee Names with Their Department Names**:
   ```sql
   SELECT employee_name,
          (SELECT department_name FROM departments WHERE department_id = employees.department_id) AS department_name
   FROM employees;
   ```

## Conclusion
Subqueries are powerful tools in SQL that allow for complex queries and data retrieval. They can be used in various ways to filter, aggregate, and manipulate data based on the results of other queries.
